version: '3.4'

services:

  userdb:
    image: "mcr.microsoft.com/mssql/server:2022-latest"
    container_name: mssqlsvr
    hostname: mssqlsvr
    volumes:
      - ./Shared/mssql/data:/var/opt/mssql/data
      - ./Shared/mssql/log:/var/opt/mssql/log
    ports:
      - 1433:1433
    environment:
        SA_PASSWORD: "p@55w0rd"
        ACCEPT_EULA: "Y"
    networks:
      - weatherapi_net
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "/opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P p@55w0rd -Q 'SELECT 1' || exit 1"]
      interval: 10s
      retries: 10
      start_period: 10s
      timeout: 3s

  authenticationservice:
    image: ${DOCKER_REGISTRY-}authenticationservice
    container_name: authenticationservice
    build:
      context: .
      dockerfile: AuthenticationService/Dockerfile
    ports:
      - 8081:443
    networks:
      - weatherapi_net
    depends_on:
      - userdb
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/status"]
      interval: 1m30s
      timeout: 10s
      retries: 3
      start_period: 2m

  forecastservice:
    image: ${DOCKER_REGISTRY-}forecastservice
    container_name: forecastservice
    build:
      context: .
      dockerfile: ForecastService/Dockerfile
    ports:
      - 8082:443
    networks:
      - weatherapi_net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/status"]
      interval: 1m30s
      timeout: 10s
      retries: 3
      start_period: 2m

  weatherapi:
    image: ${DOCKER_REGISTRY-}weatherapi
    build:
      context: .
      dockerfile: WeatherApi/Dockerfile
    ports:
      - 8080:443
    networks:
      - weatherapi_net
    depends_on:
      - forecastservice
      - authenticationservice
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/status"]
      interval: 1m30s
      timeout: 10s
      retries: 3
      start_period: 2m

  collector:
    image: otel/opentelemetry-collector-contrib:0.92.0
    container_name: collector
    command: [ "--config=/etc/otel-collector.yaml" ]
    volumes:
      - ./Shared/otel-collector.yaml:/etc/otel-collector.yaml
    networks:
      - weatherapi_net

  tempo:
    image: grafana/tempo:2.3.1
    container_name: tempo
    command: [ "-config.file=/etc/tempo.yaml" ]
    volumes:
      - ./Shared/tempo.yaml:/etc/tempo.yaml
      - ./tempo-data:/tmp/tempo
    ports:
      - "14268"  # jaeger ingest
      - "3200:3200"   # tempo
      - "4317"   # otlp grpc
      - "4318"   # otlp http
      - "9411"   # zipkin
    networks:
      - weatherapi_net

  loki:
    image: grafana/loki:2.9.3
    container_name: loki
    ports:
      - "3100:3100"
    command:
      - -validation.allow-structured-metadata
      - -config.file=/etc/loki/local-config.yaml
    networks:
      - weatherapi_net

  prometheus:
    image: prom/prometheus:v2.48.1
    container_name: prometheus
    command:
      - --config.file=/etc/prometheus.yaml
      - --web.enable-remote-write-receiver
      - --enable-feature=exemplar-storage
    volumes:
      - ./Shared/prometheus.yaml:/etc/prometheus.yaml
      - ./Shared/prometheus-data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - weatherapi_net

  grafana:
    image: grafana/grafana:10.2.3
    container_name: grafana
    volumes:
      - ./Shared/grafana-datasources.yaml:/etc/grafana/provisioning/datasources/datasources.yaml
      - ./Shared/grafana-data:/var/lib/grafana
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_AUTH_DISABLE_LOGIN_FORM=true
      - GF_FEATURE_TOGGLES_ENABLE=traceqlEditor
    ports:
      - "3000:3000"
    networks:
      - weatherapi_net

  loadgen:
    image: loadgen
    build:
      context: ./Shared/load-gen
    container_name: loadgen
    networks:
      - weatherapi_net
    depends_on:
      - weatherapi

networks:
  weatherapi_net: